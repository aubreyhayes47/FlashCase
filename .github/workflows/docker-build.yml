name: Docker Build

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build ${{ matrix.service }} Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: false
        tags: flashcase-${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test ${{ matrix.service }} container
      run: |
        docker build -t flashcase-${{ matrix.service }}:test ./${{ matrix.service }}
        docker images flashcase-${{ matrix.service }}:test

  test-compose:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create .env file
      run: |
        cat > backend/.env << EOF
        DATABASE_URL=sqlite:///./flashcase.db
        CORS_ORIGINS=["http://localhost:3000"]
        SECRET_KEY=test-secret-key-for-ci
        GROK_API_KEY=test-key
        RATE_LIMIT_ENABLED=false
        EOF
    
    - name: Test docker-compose build
      run: |
        docker-compose build --no-cache
    
    - name: Test docker-compose up
      run: |
        docker-compose up -d
        sleep 10
        docker-compose ps
    
    - name: Check backend health
      run: |
        for i in {1..10}; do
          if curl -f http://localhost:8000/api/v1/health; then
            echo "Backend is healthy"
            exit 0
          fi
          echo "Waiting for backend... ($i/10)"
          sleep 5
        done
        echo "Backend health check failed"
        docker-compose logs backend
        exit 1
    
    - name: Check frontend accessibility
      run: |
        for i in {1..10}; do
          if curl -f http://localhost:3000; then
            echo "Frontend is accessible"
            exit 0
          fi
          echo "Waiting for frontend... ($i/10)"
          sleep 5
        done
        echo "Frontend accessibility check failed"
        docker-compose logs frontend
        exit 1
    
    - name: Show logs on failure
      if: failure()
      run: |
        docker-compose logs
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
